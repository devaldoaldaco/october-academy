//M√©todos est√°ticos y de instancia con String

//Devuelve una cadena creada mediante el uso de una secuencia de valores Unicode especificada.
console.log(String.fromCharCode(89, 66, 67, 88));

//Crea caracteres a partir de c√≥digos Unicode, incluyendo emojis y s√≠mbolos avanzados.
//Comparacion
console.log(String.fromCharCode(128512));
console.log(String.fromCodePoint(128512));
//Si el codigo no es valido, se devuelve un error RangeError.
//String.fromCodePoint(NaN);

//Devuelve el texto dentro de un template literal sin interpretar las secuencias de escape(\n, \t, etc).

console.log("C:Usersanadocs");
console.log(String.raw`C:\Users\ana\docs`);

console.log("Hi\n${2 + 3}!");
console.log(String.raw`Hi\n${2 + 3}!`);

//Metodos de instancia con String

//El m√©todo anchor() crea un ancla HTML, <a>, que se usa como un enlace a hipertexto.
//METODO DEPRECADO
let titulo = "Serie: TWD";
console.log(titulo.anchor("cap1")); // <a name="cap1">Serie: TWD</a>

//El m√©todo at() devuelve el car√°cter en la posici√≥n especificada(puede ser positiva o negativa).
let texto = `Hola Mundo`;
console.log(texto.at(1)); // "o"
console.log(texto.at(-4));// "u"

//El m√©todo charArt devuelve el car√°cter en la posici√≥n especificada (tiene limitaciones)
console.log(texto.charAt(1)); //"o"
console.log(texto.charAt(-4)); //"" (vac√≠o, no acepta negativos)
console.log(texto.charAt(10)); //"" (vac√≠o, posici√≥n fuera de rango)

//El m√©todo big() crea un elemento <big> que aumenta el tama√±o del texto.
//METODO DEPRECADO
var textExample = "¬°Hola Mundo!";
console.log(textExample.big()); //<big>¬°Hola Mundo!</big>
//
console.log(textExample.small());
console.log(textExample.fontsize(7));

//El m√©todo blink() crea un elemento <blink> que hace parpadear el texto.
//METODO DEPRECADO
var textExample = "¬°Hola Mundo!";
console.log(textExample.blink()); // <blink>¬°Hola Mundo!</blink>
//
console.log(textExample.italics());
console.log(textExample.strike());

//El m√©todo bold() crea un elemento <b> que hace el texto en negrita.
//METODO DEPRECADO
var textExample = "¬°Hola Mundo!"; 
console.log(textExample.bold()); // <b>¬°Hola Mundo!</b>

// El m√©todo charCodeAt devuelve el c√≥digo Unicode (n√∫mero) del car√°cter en la posici√≥n especificada
console.log("Hola".charCodeAt(2)); //108 (c√≥digo Unicode de "l")

// El m√©todo codePointAt devuelve el c√≥digo Unicode completo del car√°cter en la posici√≥n especificada, soportando emojis y s√≠mbolos especiales.
let emoji = "üòÄ";
console.log(emoji.codePointAt(0)); //128512 (c√≥digo Unicode del emoji)

//El m√©todo concat() concatena uno o m√°s strings y devuelve un nuevo string resultante
console.log("Hi!".concat(" My name is", ":")); //"Hi! My name is:"

// El m√©todo endsWith() determina si una cadena de texto termina con los caracteres de una cadena indicada, devolviendo true o false seg√∫n corresponda.
const textEnd = "dogs are the best!";
console.log(textEnd.endsWith("best!")); //true
console.log(textEnd.endsWith("best", [17])); //true

//El m√©todo fixed() muestra el texto en una fuente donde todas las letras ocupan el mismo espacio (estilo c√≥digo)
//METODO DEPRECADO
console.log("My first name".fixed()); //<tt>My first name</tt>

//El m√©todo fontcolor() muestra el texto con un color especificado.
//METODO DEPRECADO
let bienvenida = "Welcome my dear and esteemed";
console.log(bienvenida.fontcolor("red")); // <font color="red">Welcome my dear and esteemed</font>

//El m√©todo fontsize() muestra el texto con un tama√±o especificado.
//METODO DEPRECADO
let bienvenido = "Welcome my dear and esteemed";
console.log(bienvenida.fontsize(7)); //<font size="7">Welcome my dear and esteemed</font>

//El m√©todo includes() verifica si un string contiene otro string espec√≠fico.
let frase = "JavaScript es genial";
console.log(frase.includes("Script", 4)); //true

//El m√©todo indexOf() busca un texto dentro del string y devuelve la posici√≥n (√≠ndice) donde lo encuentra. Si no lo encuentra, devuelve -1.
let frase2 = "Hola Hola Hola";
console.log(frase.indexOf("Hola", 6)); //10 
console.log(frase.indexOf("Hola", 15)); //-1

//El m√©todo isWellFormed() verifica si el string est√° bien formado (no contiene caracteres Unicode inv√°lidos o 'sustitutos solitarios'). Devuelve true o false
const textos = [
  "ab\uD800",
  "ab\uD800c",
  "\uDFFFab",
  "c\uDFFFab",
  "abc",
  "ab\uD83D\uDE04c",
];
// false (contiene surrogate solitario)
// false (contiene surrogate solitario)
// false (contiene surrogate solitario)
// false (contiene surrogate solitario)
// true (bien formado)
// true (emoji v√°lido, bien formado)
for (const texto of textos) {
  console.log(texto.isWellFormed());
}

//El m√©todo italics() muestra el texto en cursiva.
//METODO DEPRECADO
console.log("texto importante".italics()); //<i>texto importante</i>

// El m√©todo lastIndexOf() busca un texto dentro del string y devuelve la posici√≥n de la √∫ltima ocurrencia. Si no lo encuentra, devuelve -1 (lo hace de final a inicio)
let contador = "uno dos uno tres uno";
contador.lastIndexOf("uno", 10); //8

//El m√©todo link() envuelve el string en una etiqueta HTML <a> con un atributo href para crear un enlace (hiperv√≠nculo).
//METODO DEPRECADO
console.log("https://ejemplo.com".link()); //<a href="undefined">https://ejemplo.com</a>

//El m√©todo localeCompare() Compara dos cadenas de texto seg√∫n las reglas de ordenamiento del idioma local. Devuelve un n√∫mero negativo si la cadena va antes, positivo si va despu√©s, o cero si son equivalentes.
console.log("a".localeCompare("b"));//-1
console.log("b".localeCompare("a"));//1
console.log("a".localeCompare("a"));//0

// Ordenar un array con acentos correctamente
const frutas = ["manzana", "pl√°tano", "√°rbol", "naranja"];
frutas.sort((a, b) => a.localeCompare(b));
console.log(frutas); //['√°rbol', 'manzana', 'naranja', 'pl√°tano']

// Con opciones de idioma
console.log("√§".localeCompare("z", "de")); //-1
console.log("√§".localeCompare("z", "sv")); ///1

// Ignorar may√∫sculas/min√∫sculas
console.log("A".localeCompare("a", "es", { sensitivity: "base" })); //0 (son iguales ignorando may√∫sculas)

//El m√©todo match() busca coincidencias de un patr√≥n (expresi√≥n regular) en una cadena.
// Devuelve un array con las coincidencias encontradas o null si no encuentra nada.
const frase3 = "ana ama habla con mam√° ana";
console.log(texto.match(/ana/));//['ana'] (primera coincidencia)
console.log(texto.match(/ana/g));//['ana', 'ana'] (todas las coincidencias)


//El m√©todo matchAll() busca todas las coincidencias de un patr√≥n en un texto y te devuelve informaci√≥n
// detallada de cada una (incluyendo su posici√≥n y grupos capturados).
const email = "Mi email es juan@correo.com y tambi√©n uso maria@email.com";
const regex = /(\w+)@(\w+)\.(\w+)/g;
const coincidencias = texto.matchAll(regex);
// Primera coincidencia: ['juan@correo.com', 'juan', 'correo', 'com', index: 12, ...]
// Segunda coincidencia: ['maria@email.com', 'maria', 'email', 'com', index: 41, ...]

//El m√©todo normalize() normaliza caracteres Unicode para que diferentes representaciones 
// de un mismo car√°cter se conviertan en una forma est√°ndar.
const texto1 = "caf√©";  
const texto2 = "caf√©";  

console.log(texto1 === texto2); //false 
console.log(texto1.normalize() === texto2.normalize());  //ture

//El m√©todo padEnd() rellena el final de una cadena con caracteres hasta alcanzar una longitud espec√≠fica.
const precio = "50";
console.log(precio.padEnd(5, "0"));  // "50000"
console.log("Hola".padEnd(10, "."));  // "Hola......"


//El m√©todo padStart() rellena el inicio de una cadena con caracteres hasta alcanzar una longitud espec√≠fica.
const numero = "5";
console.log(numero.padStart(3, "0"));  // "005"
console.log("Hola".padStart(10, "*"));  // "******Hola"


//El m√©todo repeat() repite una cadena el n√∫mero de veces especificado.
javascriptconsole.log("Ja".repeat(3));  // "JaJaJa"
console.log("=".repeat(10));  // "=========="


//El m√©todo replace() reemplaza la primera coincidencia de un patr√≥n en una cadena.
const frase4 = "Me gusta el caf√© y el caf√©";
console.log(frase4.replace("caf√©", "t√©")); // "Me gusta el t√© y el caf√©" - Solo reemplaza el primero

//El m√©todo replaceAll() reemplaza todas las coincidencias de un patr√≥n en una cadena.
console.log(frase4.replaceAll("caf√©", "t√©"));  // "Me gusta el t√© y el t√©" - Reemplaza todos

//El m√©todo search() busca un patr√≥n en una cadena y devuelve la posici√≥n donde lo encontr√≥, o -1 si no existe.
const frase5 = "Buen dia";
console.log(frase5 .search("dia"));  // 5 (posici√≥n donde empieza)
console.log(frase5 .search("luego"));  // -1 (no existe)

//El m√©todo slice() extrae una parte de una cadena desde una posici√≥n inicial hasta una final (sin modificar la original).
console.log( "JavaScript".slice(0, 4));   // "Java"
console.log( "JavaScript".slice(4));      // "Script"
console.log( "JavaScript".slice(-6));     // "Script" (desde el final)

//El m√©todo small() envuelve el texto en etiquetas HTML <small>).
//METODO DEPRECADO
javascriptconsole.log("Texto".small());  // "<small>Texto</small>"


//El m√©todo split() divide una cadena en un array usando un separador.
const comas = "manzana,pera,uva";
console.log(texto.split(","));  // ["manzana", "pera", "uva"]
console.log("Hola".split(""));  // ["H", "o", "l", "a"]

//El m√©todo startsWith() verifica si una cadena comienza con ciertos caracteres. Devuelve true o false.
console.log("Hola Mundo".startsWith("Hola"));   // true
console.log("Hola Mundo".startsWith("Mundo"));  // false

//El m√©todo strike() envuelve el texto en etiquetas HTML <strike> (tachado).
//METODO DEPRECADO
console.log("Texto".strike());  // "<strike>Texto</strike>"


//El m√©todo sub() envuelve el texto en etiquetas HTML <sub> (sub√≠ndice).
//METODO DEPRECADO
console.log("H2O".sub());  // "<sub>H2O</sub>"


//El m√©todo substr() extrae caracteres desde una posici√≥n con una longitud espec√≠fica.
//METODO DEPRECADO
console.log("JavaScript".substr(4, 6));  // "Script"

//El m√©todo substring() extrae caracteres entre dos posiciones (similar a slice() pero sin √≠ndices negativos).
console.log("JavaScript".substring(0, 4));  // "Java"
console.log("JavaScript".substring(4));     // "Script"

//El m√©todo sup() E¬øenvuelve el texto en etiquetas HTML <sup> (super√≠ndice).
//METODO DEPRECADO
console.log("x2".sup());  // "<sup>x2</sup>"


//El m√©todo toLocaleLowerCase() convierte a min√∫sculas respetando las reglas del idioma local.
const nombreLugar = "ISTANBUL";
console.log(nombreLugar.toLocaleLowerCase("en-US"));  // "istanbul"
console.log(nombreLugar.toLocaleLowerCase("tr-TR"));  // "ƒ±stanbul" (turco)

//El m√©todo toLocaleUpperCase() convierte a may√∫sculas respetando las reglas del idioma local.
const nombreLugar2 = "istanbul";
console.log(nombreLugar2 .toLocaleUpperCase("en-US"));  // "ISTANBUL"
console.log(nombreLugar2 .toLocaleUpperCase("tr-TR"));  // "ƒ∞STANBUL" (turco)


//El m√©todo toLowerCase() convierte todos los caracteres de una cadena a min√∫sculas.
const ejemplo = "HOLA Mundo";
console.log(texto.toLowerCase());  // "hola mundo"

//El m√©todo toString() convierte un valor a cadena de texto.
const numm = 123;
console.log(numero.toString());  // "123"
console.log(String(numero));     // "123" (alternativa)

//El m√©todo toUpperCase() convierte todos los caracteres de una cadena a MAY√öSCULAS.
console.log("hola mundo".toUpperCase());  // "HOLA MUNDO"

//El m√©todo toWellFormed() reemplaza caracteres Unicode mal formados (surrogates solitarios) con el car√°cter de reemplazo ÔøΩ.
const malFormado = "Hola\uD800Mundo";  // \uD800 es un surrogate solitario
console.log(malFormado.toWellFormed());  // "HolaÔøΩMundo"


//El m√©todo trim() elimina espacios en blanco al inicio y al final de una cadena.
console.log("   Hola Mundo   ".trim());  // "Hola Mundo"


//El m√©todo trimEnd()/ trimRight() elimina espacios en blanco solo al final de una cadena.
console.log("   Hola Mundo   ".trimEnd());  // "   Hola Mundo"

//El m√©todo trimStart() / trimLeft() elimina espacios en blanco solo al inicio de una cadena.
console.log("   Hola Mundo   ".trimStart()); // "Hola Mundo   "


//El m√©todo valueOf() devuelve el valor primitivo de un objeto String (raramente necesario).
const stringPrueba = new String("Hola");

console.log(stringPrueba.valueOf());  // "Hola"
console.log(typeof stringPrueba);     // "object"
console.log(typeof stringPrueba.valueOf());  // "string"

//El m√©todo  [Symbol.iterator]() permite iterar sobre cada car√°cter de una cadena usando for...of o el operador spread.
const textoPrueba = "Hola";

// Con for...of
for (const letra of textoPrueba) {
  console.log(letra);
}
// H
// o
// l
// a

// Con spread operator
console.log([...texto]);  // ["H", "o", "l", "a"]


